SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[KEP_logger_table](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[AUTO_MANU] [bit] NULL,
	[COUNT_BAR] [int] NULL,
	[NUMBER_POCKET] [int] NULL,
	[POCKET_LOC] [bit] NULL,
	[REM_BAR] [int] NULL,
	[WEIGHT_CURRENT] [real] NULL,
	[TIMESTAMP] [datetime] NULL,
	[WEIGHT_SP_MAX] [real] NULL,
	[WEIGHT_SP_MIN] [real] NULL,
	[WEIGHT_STAB] [bit] NULL,
	[WEIGHT_ZERO] [bit] NULL,
	[PACK_SANDWICH] [bit] NULL,
	[ALARM] [bit] NULL,
	[KEY_MANU] [bit] NULL,	
	[EN_BUTTON_TARA] [bit] NULL	
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [i1_kep_logger_timestamp] ON [dbo].[KEP_logger_table]
(
	[TIMESTAMP] ASC,
	[NUMBER_POCKET] ASC
)
INCLUDE ([WEIGHT_CURRENT]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 70) ON [PRIMARY]
GO

CREATE UNIQUE INDEX [u2_number_pocket_unqiue] ON [dbo].[KEP_logger_table] ([NUMBER_POCKET])
GO


--CREATE INDEX i1_kep_logger_weight_time ON dbo.kep_logger (WEIGHT__FIX_TIMESTAMP)
--GO

--CREATE INDEX i2_kep_logger_ControllerID ON dbo.kep_logger (WEIGHT__FIX_NUMERICID)
--GO

IF OBJECT_ID ('dbo.InsKeplogger_archive',N'TR') IS NOT NULL
   DROP TRIGGER [dbo].[InsKeplogger_archive];
GO

CREATE TRIGGER [dbo].[InsKeplogger_archive] ON [dbo].[KEP_logger_table]
AFTER INSERT, UPDATE
AS
BEGIN

   SET NOCOUNT ON;

   INSERT INTO [dbo].[KEP_logger_archive]  (
           [AUTO_MANU]
           ,[COUNT_BAR]
           ,[NUMBER_POCKET]
           ,[POCKET_LOC]
           ,[REM_BAR]
           ,[WEIGHT_CURRENT]
           ,[TIMESTAMP]
           ,[WEIGHT_SP_MAX]
           ,[WEIGHT_SP_MIN]
           ,[WEIGHT_STAB]
           ,[WEIGHT_ZERO]
           ,[PACK_SANDWICH]
           ,[ALARM]
           ,[KEY_MANU]
           ,[EN_BUTTON_TARA]
           ,[WEIGHT_OK]
           ,[CMD_TAKE_WEIGHT]
           ,[PEREBOR]) 
		   SELECT 
           [AUTO_MANU]
           ,[COUNT_BAR]
           ,[NUMBER_POCKET]
           ,[POCKET_LOC]
           ,[REM_BAR]
           ,[WEIGHT_CURRENT]
           ,[TIMESTAMP]
           ,[WEIGHT_SP_MAX]
           ,[WEIGHT_SP_MIN]
           ,[WEIGHT_STAB]
           ,[WEIGHT_ZERO]
           ,[PACK_SANDWICH]
           ,[ALARM]
           ,[KEY_MANU]
           ,[EN_BUTTON_TARA]
           ,[WEIGHT_OK]
           ,[CMD_TAKE_WEIGHT]
           ,[PEREBOR] FROM INSERTED;

END
GO

EXEC sp_settriggerorder @triggername=N'[dbo].[InsKeplogger_archive]', @order=N'First', @stmttype=N'INSERT'
GO

----------------------------------------------------------------------------------------------------------
IF OBJECT_ID ('dbo.InsKeplogger',N'TR') IS NOT NULL
   DROP TRIGGER [dbo].[InsKeplogger];
GO

CREATE TRIGGER [dbo].[InsKeplogger] ON [dbo].[KEP_logger_table]
AFTER INSERT, UPDATE
AS
BEGIN

SET NOCOUNT ON;
SET XACT_ABORT OFF;

SAVE TRANSACTION updProperty;

BEGIN TRY

   DECLARE @NUMBER_POCKET    INT,
           @WEIGHT_ZERO      BIT,
		   @PACK_SANDWICH	 BIT,
		   @WEIGHT_CURRENT   real,
           @EquipmentID      INT,
           @TakeWeightLocked [NVARCHAR](50),
           @err_message      [NVARCHAR](255);

   SELECT @NUMBER_POCKET=[NUMBER_POCKET],
          @WEIGHT_ZERO=[WEIGHT_ZERO],
		  @WEIGHT_CURRENT=[WEIGHT_CURRENT],
		  @PACK_SANDWICH=[PACK_SANDWICH]
   FROM INSERTED;

   IF @WEIGHT_ZERO=1
      BEGIN
         SET @EquipmentID=dbo.get_EquipmentIDByScalesNo(@NUMBER_POCKET);
         IF @EquipmentID IS NULL
            BEGIN
               SET @err_message = N'By SCALES_NO=[' + @NUMBER_POCKET + N'] EquipmentID not found';
               THROW 60010, @err_message, 1;
            END;

         SET @TakeWeightLocked=dbo.get_EquipmentPropertyValue(@EquipmentID,N'TAKE_WEIGHT_LOCKED');
         IF @TakeWeightLocked NOT IN (N'0')
            EXEC [dbo].[upd_EquipmentProperty] @EquipmentID = @EquipmentID,
                                               @EquipmentClassPropertyValue = N'TAKE_WEIGHT_LOCKED',
                                               @EquipmentPropertyValue = N'0';
      END;

	IF @PACK_SANDWICH=1
		IF @WEIGHT_CURRENT=0
			BEGIN
			SET @EquipmentID=dbo.get_EquipmentIDByScalesNo(@NUMBER_POCKET);
         IF @EquipmentID IS NULL
            BEGIN
               SET @err_message = N'By SCALES_NO=[' + @NUMBER_POCKET + N'] EquipmentID not found';
               THROW 60010, @err_message, 1;
            END;

         SET @TakeWeightLocked=dbo.get_EquipmentPropertyValue(@EquipmentID,N'TAKE_WEIGHT_LOCKED');
         IF @TakeWeightLocked NOT IN (N'0')
            EXEC [dbo].[upd_EquipmentProperty] @EquipmentID = @EquipmentID,
                                               @EquipmentClassPropertyValue = N'TAKE_WEIGHT_LOCKED',
                                               @EquipmentPropertyValue = N'0';
      END;

END TRY

BEGIN CATCH
   ROLLBACK TRANSACTION updProperty;
   BEGIN TRY
      SAVE TRANSACTION InsErr;
      EXEC [dbo].[ins_ErrorLog];
   END TRY
   BEGIN CATCH
      ROLLBACK TRANSACTION InsErr;
   END CATCH
END CATCH

END
GO

EXEC sp_settriggerorder @triggername=N'[dbo].[InsKeplogger]', @order=N'Last', @stmttype=N'INSERT'
GO
